package cross_set

import (
	"github.com/domino14/macondo/board"
	"github.com/domino14/macondo/gaddag"
	"github.com/domino14/macondo/move"
	"github.com/domino14/macondo/tilemapping"
)

type CrossSet = board.CrossSet
type Board = board.GameBoard

const (
	Left       = board.LeftDirection
	Right      = board.RightDirection
	Horizontal = board.HorizontalDirection
	Vertical   = board.VerticalDirection
)

// Public cross_set.Generator Interface
// There are two concrete implementations below,
// - CrossScoreOnlyGenerator{Dist}
// - GaddagCrossSetGenerator{Dist, Gaddag}

type Generator interface {
	Generate(b *Board, row int, col int, dir board.BoardDirection)
	GenerateAll(b *Board)
	UpdateForMove(b *Board, m *move.Move)
}

// generateAll generates all cross-sets. It goes through the entire
// board; our anchor algorithm doesn't quite match the one in the Gordon
// paper.
// We do this for both transpositions of the board.
func generateAll(g Generator, b *Board) {
	n := b.Dim()
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			g.Generate(b, i, j, Horizontal)
		}
	}
	b.Transpose()
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			g.Generate(b, i, j, Vertical)
		}
	}
	// And transpose back to the original orientation.
	b.Transpose()
}

// Assumes all across words are HORIZONTAL.
func calcForAcross(rowStart int, colStart int, csd board.BoardDirection,
	g Generator, m *move.Move, b *Board) {

	for row := rowStart; row < len(m.Tiles())+rowStart; row++ {
		if m.Tiles()[row-rowStart] == 0 {
			// No new "across word" was generated by this tile, so no need
			// to update cross set.
			continue
		}
		// Otherwise, look along this row. Note, the edge is still part
		// of the word.
		rightCol := b.WordEdge(int(row), int(colStart), Right)
		leftCol := b.WordEdge(int(row), int(colStart), Left)
		g.Generate(b, int(row), int(rightCol)+1, csd)
		g.Generate(b, int(row), int(leftCol)-1, csd)
		// This should clear the cross set on the just played tile.
		g.Generate(b, int(row), int(colStart), csd)
	}
}

// assumes self is HORIZONTAL
func calcForSelf(rowStart int, colStart int, csd board.BoardDirection,
	g Generator, m *move.Move, b *Board) {
	// Generate cross-sets on either side of the word.
	for col := int(colStart) - 1; col <= int(colStart)+len(m.Tiles()); col++ {
		g.Generate(b, int(rowStart), col, csd)
	}
}

func updateForMove(g Generator, b *Board, m *move.Move) {

	// log.Trace().Msgf("Updating for move: %s", m.ShortDescription())
	row, col, vertical := m.CoordsAndVertical()
	// Every tile placed by this new move creates new "across" words, and we need
	// to update the cross sets on both sides of these across words, as well
	// as the cross sets for THIS word.

	if vertical {
		calcForAcross(row, col, Horizontal, g, m, b)
		b.Transpose()
		row, col = col, row
		calcForSelf(row, col, Vertical, g, m, b)
		b.Transpose()
	} else {
		calcForSelf(row, col, Horizontal, g, m, b)
		b.Transpose()
		row, col = col, row
		calcForAcross(row, col, Vertical, g, m, b)
		b.Transpose()
	}
}

// ----------------------------------------------------------------------
// Use a CrossScoreOnlyGenerator when you don't need cross sets

type CrossScoreOnlyGenerator struct {
	Dist *tilemapping.LetterDistribution
}

func (g *CrossScoreOnlyGenerator) Generate(b *Board, row int, col int, dir board.BoardDirection) {
	genCrossScore(b, row, col, dir, g.Dist)
}

func (g *CrossScoreOnlyGenerator) GenerateAll(b *Board) {
	generateAll(g, b)
}

func (g *CrossScoreOnlyGenerator) UpdateForMove(b *Board, m *move.Move) {
	updateForMove(g, b, m)
}

// Wrapper functions to save rewriting all the tests

func GenAllCrossScores(b *Board, ld *tilemapping.LetterDistribution) {
	gen := CrossScoreOnlyGenerator{Dist: ld}
	gen.GenerateAll(b)
}

// ----------------------------------------------------------------------
// Implementation for CrossScoreOnlyGenerator

func genCrossScore(b *Board, row int, col int, dir board.BoardDirection,
	ld *tilemapping.LetterDistribution) {
	if row < 0 || row >= b.Dim() || col < 0 || col >= b.Dim() {
		return
	}
	// If the square has a letter in it, its cross set and cross score
	// should both be 0
	if b.HasLetter(row, col) {
		b.SetCrossScore(row, col, 0, dir)
		return
	}
	// If there's no tile adjacent to this square in any direction,
	// every letter is allowed.
	if b.LeftAndRightEmpty(row, col) {
		b.SetCrossScore(row, col, 0, dir)
		return
	}
	// If we are here, there is a letter to the left, to the right, or both.
	// start from the right and go backwards.
	rightCol := b.WordEdge(row, col+1, Right)
	if rightCol == col {
		score := b.TraverseBackwardsForScore(row, col-1, ld)
		b.SetCrossScore(row, col, score, dir)
	} else {
		// Otherwise, the right is not empty. Check if the left is empty,
		// if so we just traverse right, otherwise, we try every letter.
		scoreR := b.TraverseBackwardsForScore(row, rightCol, ld)
		scoreL := b.TraverseBackwardsForScore(row, col-1, ld)
		b.SetCrossScore(row, col, scoreR+scoreL, dir)
	}
}

// ----------------------------------------------------------------------
// GaddagCrossSetGenerator generates cross sets via a gaddag

type GaddagCrossSetGenerator struct {
	Dist   *tilemapping.LetterDistribution
	Gaddag gaddag.WordGraph
}

func (g *GaddagCrossSetGenerator) Generate(b *Board, row int, col int, dir board.BoardDirection) {
	GenCrossSet(b, row, col, dir, g.Gaddag, g.Dist)
}

func (g *GaddagCrossSetGenerator) GenerateAll(b *Board) {
	generateAll(g, b)
}

func (g *GaddagCrossSetGenerator) UpdateForMove(b *Board, m *move.Move) {
	updateForMove(g, b, m)
}

// Wrapper functions to save rewriting all the tests

func GenAllCrossSets(b *Board, gd gaddag.WordGraph, ld *tilemapping.LetterDistribution) {
	gen := GaddagCrossSetGenerator{Dist: ld, Gaddag: gd}
	gen.GenerateAll(b)
}

func UpdateCrossSetsForMove(b *Board, m *move.Move,
	gd gaddag.WordGraph, ld *tilemapping.LetterDistribution) {
	gen := GaddagCrossSetGenerator{Dist: ld, Gaddag: gd}
	gen.UpdateForMove(b, m)
}

// ----------------------------------------------------------------------
// Implementation for GaddagCrossSetGenerator

func traverseBackwards(b *Board, row int, col int,
	nodeIdx uint32, checkLetterSet bool, leftMostCol int,
	gaddag gaddag.WordGraph) (uint32, bool) {
	// Traverse the letters on the board backwards (left). Return the index
	// of the node in the gaddag for the left-most letter, and a boolean
	// indicating if the gaddag path was valid.
	// If checkLetterSet is true, then we traverse until leftMostCol+1 and
	// check the letter set of this node to see if it includes the letter
	// at leftMostCol
	for b.PosExists(row, col) {
		ml := b.GetLetter(row, col)
		if ml == 0 {
			break
		}

		if checkLetterSet && col == leftMostCol {
			if gaddag.InLetterSet(ml, nodeIdx) {
				return nodeIdx, true
			}
			// Give up early; if we're checking letter sets we only care about
			// this column.
			return nodeIdx, false
		}

		nodeIdx = gaddag.NextNodeIdx(nodeIdx, ml.Unblank())
		if nodeIdx == 0 {
			// There is no path in the gaddag for this word part; this
			// can occur if a phony was played and stayed on the board
			// and the phony has no extensions for example, or if it's
			// a real word with no further extensions.
			return nodeIdx, false
		}

		col--
	}

	return nodeIdx, true
}

// GenCrossSet generates a cross-set for each individual square.
func GenCrossSet(b *Board, row int, col int, dir board.BoardDirection,
	gaddag gaddag.WordGraph, ld *tilemapping.LetterDistribution) {

	if row < 0 || row >= b.Dim() || col < 0 || col >= b.Dim() {
		return
	}
	// If the square has a letter in it, its cross set and cross score
	// should both be 0
	if b.HasLetter(row, col) {
		b.ClearCrossSet(row, col, dir)
		b.SetCrossScore(row, col, 0, dir)
		return
	}
	// If there's no tile adjacent to this square in any direction,
	// every letter is allowed.
	if b.LeftAndRightEmpty(row, col) {
		b.SetCrossSet(row, col, board.TrivialCrossSet, dir)
		b.SetCrossScore(row, col, 0, dir)

		return
	}
	// If we are here, there is a letter to the left, to the right, or both.
	// start from the right and go backwards.
	rightCol := b.WordEdge(row, col+1, Right)
	if rightCol == col {
		// This means the right was always empty; we only want to go left.
		lNodeIdx, lPathValid := traverseBackwards(b, row, col-1,
			gaddag.GetRootNodeIndex(), false, 0, gaddag)
		score := b.TraverseBackwardsForScore(row, col-1, ld)
		b.SetCrossScore(row, col, score, dir)

		if !lPathValid {
			// There are no further extensions to the word on the board,
			// which may also be a phony.
			b.SetCrossSet(row, col, 0, dir)
			return
		}
		// Otherwise, we have a left node index.
		sIdx := gaddag.NextNodeIdx(lNodeIdx, 0)
		// Take the letter set of this sIdx as the cross-set.
		letterSet := gaddag.GetLetterSet(sIdx)
		// Miraculously, letter sets and cross sets are compatible.
		b.SetCrossSet(row, col, CrossSet(letterSet), dir)
	} else {

		// Otherwise, the right is not empty. Check if the left is empty,
		// if so we just traverse right, otherwise, we try every letter.
		leftCol := b.WordEdge(row, col-1, Left)
		// Start at the right col and work back to this square.
		lNodeIdx, lPathValid := traverseBackwards(b, row, rightCol,
			gaddag.GetRootNodeIndex(), false, 0, gaddag)
		scoreR := b.TraverseBackwardsForScore(row, rightCol, ld)
		scoreL := b.TraverseBackwardsForScore(row, col-1, ld)
		b.SetCrossScore(row, col, scoreR+scoreL, dir)
		if !lPathValid {
			b.SetCrossSet(row, col, 0, dir)
			return
		}
		if leftCol == col {
			// The left is empty, but the right isn't.
			// The cross-set is just the letter set of the letter directly
			// to our right.

			letterSet := gaddag.GetLetterSet(lNodeIdx)
			b.SetCrossSet(row, col, CrossSet(letterSet), dir)
		} else {
			// Both the left and the right have a tile. Go through the
			// siblings, from the right, to see what nodes lead to the left.

			b.SetCrossSet(row, col, 0, dir)
			if gaddag.IsEnd(lNodeIdx) {
				return
			}
			for i := lNodeIdx + 1; ; i++ {
				t := gaddag.Tile(i)
				nn := gaddag.ArcIndex(i)
				if t == 0 {
					continue
				}
				_, success := traverseBackwards(b, row, col-1, nn, true, leftCol, gaddag)
				if success {
					b.SetCrossSetLetter(row, col, dir, tilemapping.MachineLetter(t))
				}
				if gaddag.IsEnd(i) {
					break
				}
			}

		}
	}
}
